Nivel C:

- Q1 The average, the minimum, the maximum, and the standard deviation of the number of fix-up tasks per user.

*Bien: Query: select avg(c.fixUpTasks.size), min(c.fixUpTasks.size) , max(c.fixUpTasks.size), sqrt(sum(c.fixUpTasks.size*c.fixUpTasks.size)/count(c.fixUpTasks.size)-(avg(c.fixUpTasks.size)*avg(c.fixUpTasks.size))) from Customer c;

Descripción: Al utilizar esta consulta, podemos obtener el promedio, el mínimo, el máximo y la desviación estándar del número de fix-up tasks por user.

- Q2 The average, the minimum, the maximum, and the standard deviation of the number of applications per fix-up task.

*Bien: Query: select avg(f.applications.size), min(f.applications.size) , max(f.applications.size), sqrt(sum(f.applications.size*f.applications.size)/count(f.applications.size)-(avg(f.applications.size)*avg(f.applications.size))) from FixUpTask f;

Descripción: Al utilizar esta consulta, podemos obtener el promedio, el mínimo, el máximo y la desviación estándar del número de applications por fix-up tasks.

- Q3 The average, the minimum, the maximum, and the standard deviation of the maximum price of the fix-up tasks.

Query: select avg(f.maxPrice.size), min(f.maxPrice.size) , max(f.maxPrice.size), sqrt(sum(f.maxPrice.size*f.maxPrice.size)/count(f.maxPrice.size)-(avg(f.maxPrice.size)*avg(f.maxPrice.size))) from FixUpTask f;


- Q4 The average, the minimum, the maximum, and the standard deviation of the price offered in the applications.

Query: select avg(a.offeredPrice.size), min(a.offeredPrice.size) , max(a.offeredPrice.size), sqrt(sum(a.offeredPrice.size*a.offeredPrice.size)/count(a.offeredPrice.size)-(avg(a.offeredPrice.size)*avg(a.offeredPrice.size))) from Application a;

- Q5 The ratio of pending applications.

*Bien: Query: select sum(case when a.status = 'PENDING' then 1.0 else 0.0 end)/count(a) from Application a;

- Q6 The ratio of accepted applications.

*Bien: Query: select sum(case when a.status='ACCEPTED' then 1.0 else 0.0 end)/count(a) from Application a;

- Q7 The ratio of rejected applications.

*Bien: Query: select sum(case when a.status='REJECTED' then 1.0 else 0.0 end)/count(a) from Application a;

- Q8 The ratio of pending applications that cannot change its status because their time period’s elapsed.

Query: select (select count(a) from Application a join a.fixUpTask f where f.startDate <= current_date) / (select count(b) from Application b))*100;

- Q9 The listing of customers who have published at least 10% more fix-up tasks than the average, ordered by number of applications.

Query: select c from customer c where (select count(f) from c.fixuptask f where f.id_fixuptask = c.id_fixuptask and f.status = 'published') >= select ((
select count(a) from customer cu join cu.application a where a.status = 'published') / (select count(cust) from customer cus))*1.1;

select c from Customer c join c.task t ordered by t.applications.size;

*Bien: - Q10 The listing of handy workers who have got accepted at least 10% more ap-plications than the average, ordered by number of applications.

select h from HandyWorker h join h.applications a join a.fixUpTask t where a.status='ACCEPTED' order by t.complaints.size;

----------------------------------------------

Nivel B:

- Q1 The minimum, the maximum, the average, and the standard deviation of the number of complaints per fix-up task.

*Bien: Query: select min(f.complaints.size), max(f.complaints.size), avg(f.complaints.size), sqrt(sum(f.complaints.size*f.complaints.size)/count(f.complaints.size)-(avg(f.complaints.size)*avg(f.complaints.size))) from FixUpTask f;

Query: select avg((count (fx1 complaints), sqrt(sum(fx2 complaints *fx2 complaints)/ count (fx2(complaints)*(avg fx2.complaints)*avg(fx2 complaints))) from fixuptask fx1, 
fixuptask fx2);

- Q2 The minimum, the maximum, the average, and the standard deviation of the number of notes per referee report.

Query: select min(r.note.size), max(r.note.size), avg(r.note.size), sqrt(sum(r.note.size*r.note.size)/count(r.note.size)-(avg(r.note.size)*avg(r.note.size))) from Referee r;

- Q3 The ratio of fix-up tasks with a complaint.

Query: select sum(case when r.suspicious = 1 then 1.0 else 0.0 end)/count(r)  from FixUpTask f;

**- Q4 The top-three customers in terms of complaints.

select c from Customer c join c.fixUpTasks t order by t.complaints.size;

- Q5 The top-three handy workers in terms of complaints.

Query: select a.handyWorker from Application a join a.fixUpTask fx where(fx.complaints > 0) having (count (a handyWorker) = 3)
order by fx complaints desc;


select top y order by desc limit 0.3.


